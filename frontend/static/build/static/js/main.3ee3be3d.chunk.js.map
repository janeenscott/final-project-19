{"version":3,"sources":["component/ChatMessages.js","component/ChatInput.js","component/UpdateMessage.js","container/App.js","serviceWorker.js","index.js"],"names":["ChatMessages","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertMessageFromJSONToText","text","x","stateToHTML","convertFromRaw","JSON","parse","console","log","e","blocks","state","_this2","react_default","a","createElement","className","messages","map","message","ListGroup_default","key","id","Item","sender","dangerouslySetInnerHTML","__html","onClick","handleEdit","Component","ChatInput","onEditorStateChange","editorState","setState","messageText","EditorState","createEmpty","handleSubmit","bind","assertThisInitialized","event","preventDefault","convertToRaw","getCurrentContent","sendMessage","onSubmit","react_draft_wysiwyg","toolbarClassName","wrapperClassName","editorClassName","type","UpdateMessage","plainText","message_text","content","ContentState","createFromText","createWithContent","moveFocusToEnd","updateMessage","App","body","fetch","method","stringify","headers","Accept","Content-Type","then","response","json","post","push","length","concat","isEditing","res","result","error","component_UpdateMessage","component_ChatMessages","component_ChatInput","href","Boolean","window","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ee3be3d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../container/App.css';\nimport {stateToHTML} from 'draft-js-export-html';\nimport { convertFromRaw } from 'draft-js';\nimport Listgroup from 'react-bootstrap/ListGroup'\n\n\nimport moment from 'moment'\n\n\n\nclass ChatMessages extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // messages:  [\n            //     {messageText: '', sender: '', timeSent: ''},\n            //     ]\n        }\n\n    }\n\n   convertMessageFromJSONToText = (text) => {\n        let x;\n\n        try {\n            x = stateToHTML(convertFromRaw(JSON.parse(text)));\n            console.log('try', x);\n        }catch (e) {\n            x = text.blocks[0].text;\n            console.log('catch', x);\n        }\n\n        console.log('what are we returning', x);\n        return x\n    };\n\n    render() {\n        return (\n            <div className='message-list'>\n                {this.props.messages.map(message => {\n                    return (\n                        <Listgroup className=\"message\" key={message.id}>\n                            <Listgroup.Item>\n                                {message.sender['first_name']}\n                            </Listgroup.Item>\n                                <Listgroup.Item\n                                    dangerouslySetInnerHTML={{__html: this.convertMessageFromJSONToText(message['message_text'])}}>\n                                </Listgroup.Item>\n                            <Listgroup.Item>\n                                {message['time_sent']}\n                            </Listgroup.Item>\n                            <Listgroup.Item>\n                                <p className='edit' onClick={()=>this.props.handleEdit(message)}>&#9998;</p><p className='delete'>üóëÔ∏è</p>\n                            </Listgroup.Item>\n\n\n                            <br/>\n                        </Listgroup>\n                    )\n                })\n                }\n            </div>\n        )\n    }\n}\n\nexport default ChatMessages;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport {Editor} from 'react-draft-wysiwyg'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\n\nclass ChatInput extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            messageText: '',\n            editorState: EditorState.createEmpty()\n        };\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    // handleChange(event){\n    //     this.setState({\n    //         [event.target.name]: event.target.value\n    //     })\n    // }\n\n    onEditorStateChange = (editorState) => {\n\n        this.setState({\n            editorState,\n        });\n    };\n\n    handleSubmit(event){\n        event.preventDefault();\n        convertToRaw(this.state.editorState.getCurrentContent());\n        console.log('send message', this.state.editorState);\n        this.props.sendMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n\n            // messageText: ''\n        })\n    }\n\n    render() {\n        return(\n         <form\n             className='message-input-form'\n             onSubmit={this.handleSubmit}\n         >\n\n             <div className='editor'>\n               <Editor\n                editorState={this.state.editorState}\n                toolbarClassName=\"toolbarClassName\"\n                wrapperClassName=\"wrapperClassName\"\n                editorClassName=\"editorClassName\"\n                onEditorStateChange={this.onEditorStateChange}\n            />\n\n              <button type=\"submit\" className=\"btn btn-primary\">\n                        Send\n                    </button>\n             </div>\n         </form>\n        )\n    }\n}\n\nexport default ChatInput;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport {convertToRaw, EditorState, ContentState} from \"draft-js\";\nimport {Editor} from \"react-draft-wysiwyg\";\n\nclass UpdateMessage extends Component {\n    constructor(props) {\n        super(props);\n        // let plainText = 'What up dude'\n        // let content = ContentState.createFromText(plainText);\n        this.state = {\n            messageText: '',\n            editorState: null\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        // this.onChange = this.onChange.bind(this);\n    }\n\n\n    componentDidMount() {\n        let plainText = this.props.message.message_text.blocks[0].text;\n        let content = ContentState.createFromText(plainText);\n        let editorState = EditorState.createWithContent(content);\n        editorState = EditorState.moveFocusToEnd(editorState);\n        this.setState({\n            editorState\n        });\n    }\n\n    //  onChange(editorState) {\n    //     console.log('onChange, editorState', editorState);\n    //     // this.setState({editorState});\n    // }\n\n    onEditorStateChange = (editorState) => {\n        console.log('editorState onEditorStateChange: ', editorState);\n        // console.log(editorState.message.id)\n        this.setState({editorState});\n    };\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log('editor state on submit: ', this.state.editorState);\n        // convertToRaw(this.state.editorState.getCurrentContent());\n        // console.log('send message', this.state.editorState);\n        this.props.updateMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n        })\n    }\n\n    render() {\n        console.log('editor state at top of render: ', this.state.editorState);\n        return (\n            <form\n                className='message-input-form'\n                onSubmit={this.handleSubmit}\n            >\n\n                <Editor\n                    editorState={this.state.editorState}\n                    onEditorStateChange={this.onEditorStateChange}\n                    // onChange={this.onChange}\n                    toolbarClassName=\"toolbarClassName\"\n                    wrapperClassName=\"wrapperClassName\"\n                    editorClassName=\"editorClassName\"\n                />\n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                    Save\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default UpdateMessage;","import React, {Component} from 'react';\nimport './App.css';\nimport ChatMessages from '../component/ChatMessages'\nimport ChatInput from '../component/ChatInput'\nimport {convertFromRaw, convertToRaw} from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport moment from 'moment'\nimport UpdateMessage from \"../component/UpdateMessage\";\nimport Button from 'react-bootstrap/Button'\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            isEditing: false,\n        };\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n    }\n\n    sendMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('body: ', body);\n        console.log('editorState: ', editorState);\n\n        fetch('/api/message/', {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n            var messages = this.state.messages;\n\n            post.message_text = JSON.stringify(post.message_text);\n\n            messages.push(post);\n\n            this.setState({messages: messages});\n\n            console.log('this: ', this.state.messages[messages.length - 1]);\n        });\n\n\n    };\n\n    updateMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('updateMessage, body: ', body);\n        console.log('updateMessage, editorState: ', editorState);\n\n        fetch(`/api/message/${this.state.isEditing.id}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n            var messages = this.state.messages;\n\n            post.message_text = JSON.stringify(post.message_text);\n\n            messages.push(post);\n\n\n            console.log('body: ', body);\n            console.log('editorState: ', editorState);\n            this.setState({messages: messages});\n\n            console.log('new state, last message ', this.state.messages[messages.length - 1]);\n        });\n\n\n    };\n\n    handleEdit(message) {\n\n        console.log('handleEdit is firing', message);\n        this.setState({isEditing: message});\n\n    }\n\n// loads messages from api/message onto screen\n    componentDidMount() {\n        fetch('/api/message/')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                    this.setState({\n                        messages: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const isEditing = this.state.isEditing;\n\n        return (\n            <div className=\"App\">\n                <h1>Let's talk!</h1>\n                {/*<h3>Not sure what to say?</h3>*/}\n                {/*<ul>*/}\n                {/*<li className=\"topic\">Convo topic #1</li>*/}\n                {/*<li className=\"topic\">Convo topic #2</li>*/}\n                {/*<li className=\"topic\">Convo topic #3</li>*/}\n                {/*<li className=\"topic\">Convo topic #4</li>*/}\n                {/*</ul>*/}\n\n\n                {isEditing ? (\n                    <UpdateMessage updateMessage={this.updateMessage} message={this.state.isEditing}/>\n                ) : (\n                    <div>\n                        <ChatMessages messages={this.state.messages} handleEdit={this.handleEdit}/>\n                        <ChatInput sendMessage={this.sendMessage}/>\n                    </div>\n                )\n                }\n                {/*<Button onClick={location.href='buddies:profile'}/>*/}\n                <button>\n                    <a href=\"../profile\">Go Back to Profile</a>\n                </button>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["component/ChatMessages.js","component/ChatInput.js","component/UpdateMessage.js","container/App.js","serviceWorker.js","index.js"],"names":["ChatMessages","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertMessageFromJSONToText","text","x","console","log","stateToHTML","convertFromRaw","JSON","parse","e","state","_this2","react_default","a","createElement","className","messages","map","message","dateToFormat","ListGroup_default","key","id","Item","sender","dangerouslySetInnerHTML","__html","dist_default","format","onClick","handleEdit","deleteMessage","Component","ChatInput","onEditorStateChange","editorState","setState","messageText","EditorState","createEmpty","handleSubmit","bind","assertThisInitialized","event","preventDefault","convertToRaw","getCurrentContent","sendMessage","onSubmit","react_draft_wysiwyg","toolbarClassName","wrapperClassName","editorClassName","type","UpdateMessage","plainText","message_text","blocks","content","ContentState","createFromText","createWithContent","moveFocusToEnd","updateMessage","App","body","fetch","method","stringify","headers","Accept","Content-Type","then","response","json","post","push","length","concat","isEditing","newMessages","filter","currentMessage","res","result","error","action","component_UpdateMessage","component_ChatMessages","component_ChatInput","Boolean","window","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4c40b78.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../container/App.css';\nimport {stateToHTML} from 'draft-js-export-html';\nimport {stateFromHTML} from \"draft-js-import-html\";\nimport {convertFromRaw, convertToRaw, EditorState, ContentState} from 'draft-js';\nimport Listgroup from 'react-bootstrap/ListGroup'\n\n\nimport Moment from 'react-moment';\n\n\nclass ChatMessages extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // userAuthorized: false\n        };\n\n        // const moment = require('moment');\n        //\n        // let now = moment();\n\n\n    }\n\n    // hideIfUnauthorized = (user) =>{\n    //     if (user = self.request.user);\n    //     {userAuthorized: true}\n    // };\n\n\n    convertMessageFromJSONToText = (text) => {\n        console.log('this is my text', text);\n        let x;\n\n        try {\n            // this fires when you add a new message\n            x = stateToHTML(convertFromRaw(JSON.parse(text)));\n            console.log('try', x);\n        } catch (e) {\n            // x = stateToHTML(convertFromRaw(text));\n            // this fires when you pull data from the server\n            // x = stateFromHTML(convertFromRaw(JSON.parse(text)));\n\n            // let test = ContentState.createFromBlockArray(text.blocks)\n            // console.log('testing here', test)\n\n            x = stateToHTML(convertFromRaw(text));\n            // x = text.blocks[0].text;\n            console.log('blocks[0].text', x);\n        }\n\n        console.log('what are we returning', x);\n        return x\n    };\n\n\n    render() {\n\n        return (\n            <div className='message-list'>\n                <div>\n                    {this.props.messages.map(message => {\n                        const dateToFormat = message['time_sent'];\n                        return (\n\n                                <Listgroup className=\"message\" key={message.id}>\n                                    <Listgroup.Item>\n                                        {message.sender['first_name']}\n                                    </Listgroup.Item>\n                                    <Listgroup.Item\n                                        dangerouslySetInnerHTML={{__html: this.convertMessageFromJSONToText(message['message_text'])}}>\n                                    </Listgroup.Item>\n                                    <Listgroup.Item>\n                                        <Moment format=\"MMMM Do YYYY, h:mm a\">\n                                            {dateToFormat}\n                                        </Moment>\n                                    </Listgroup.Item>\n\n                                    <Listgroup.Item className=\"unauthorized\">\n                                        <p className='edit' onClick={() => this.props.handleEdit(message)}>&#9998;</p>\n                                        <p className='delete' onClick={() => this.props.deleteMessage(message)}>🗑️</p>\n                                    </Listgroup.Item>\n                                    <br/>\n                                </Listgroup>\n\n\n                        )\n                    })\n                    }\n                     </div>\n                </div>\n                )\n                }\n                }\n\n                export default ChatMessages;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport {Editor} from 'react-draft-wysiwyg'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\n\nclass ChatInput extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            messageText: '',\n            editorState: EditorState.createEmpty()\n        };\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    // handleChange(event){\n    //     this.setState({\n    //         [event.target.name]: event.target.value\n    //     })\n    // }\n\n    onEditorStateChange = (editorState) => {\n\n        this.setState({\n            editorState,\n        });\n    };\n\n    handleSubmit(event){\n        event.preventDefault();\n        convertToRaw(this.state.editorState.getCurrentContent());\n        console.log('send message', this.state.editorState);\n        this.props.sendMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n\n            // messageText: ''\n        })\n    }\n\n    render() {\n        return(\n         <form\n             className='message-input-form'\n             onSubmit={this.handleSubmit}\n         >\n\n             <div className='editor'>\n               <Editor\n                editorState={this.state.editorState}\n                toolbarClassName=\"toolbarClassName\"\n                wrapperClassName=\"wrapperClassName\"\n                editorClassName=\"editorClassName\"\n                onEditorStateChange={this.onEditorStateChange}\n            />\n            </div>\n              <button type=\"submit\" className=\"btn btn-redirect\">\n                        Send\n                    </button>\n\n         </form>\n        )\n    }\n}\n\nexport default ChatInput;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport {convertToRaw, EditorState, ContentState} from \"draft-js\";\nimport {Editor} from \"react-draft-wysiwyg\";\n\nclass UpdateMessage extends Component {\n    constructor(props) {\n        super(props);\n        // let plainText = 'What up dude'\n        // let content = ContentState.createFromText(plainText);\n        this.state = {\n            // messageText: '',\n            editorState: null\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        // this.onChange = this.onChange.bind(this);\n    }\n\n\n    componentDidMount() {\n        let plainText = this.props.message.message_text.blocks[0].text;\n        let content = ContentState.createFromText(plainText);\n        let editorState = EditorState.createWithContent(content);\n        editorState = EditorState.moveFocusToEnd(editorState);\n        this.setState({\n            editorState\n        });\n    }\n\n    //  onChange(editorState) {\n    //     console.log('onChange, editorState', editorState);\n    //     // this.setState({editorState});\n    // }\n\n    onEditorStateChange = (editorState) => {\n        console.log('editorState onEditorStateChange: ', editorState);\n        // console.log(editorState.message.id)\n        this.setState({editorState});\n    };\n\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log('editor state on submit: ', this.state.editorState);\n        // convertToRaw(this.state.editorState.getCurrentContent());\n        // console.log('send message', this.state.editorState);\n        this.props.updateMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n        })\n    }\n\n    render() {\n        console.log('editor state at top of render: ', this.state.editorState);\n        return (\n            <form\n                className='message-input-form'\n                onSubmit={this.handleSubmit}\n            >\n\n                <Editor\n                    editorState={this.state.editorState}\n                    onEditorStateChange={this.onEditorStateChange}\n                    // onChange={this.onChange}\n                    toolbarClassName=\"toolbarClassName\"\n                    wrapperClassName=\"wrapperClassName\"\n                    editorClassName=\"editorClassName\"\n                />\n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                    Save\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default UpdateMessage;","import React, {Component} from 'react';\nimport './App.css';\nimport ChatMessages from '../component/ChatMessages'\nimport ChatInput from '../component/ChatInput'\nimport {convertFromRaw, convertToRaw, EditorState} from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport moment from 'moment'\nimport UpdateMessage from \"../component/UpdateMessage\";\nimport Button from 'react-bootstrap/Button'\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            isEditing: false,\n        };\n\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        // this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    //************ API methods *********\n\n    sendMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('body: ', body);\n        console.log('editorState: ', editorState);\n\n        fetch('/api/message/', {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n            var messages = this.state.messages;\n\n            post.message_text = JSON.stringify(post.message_text);\n\n            messages.push(post);\n\n            this.setState({messages: messages});\n\n            console.log('this: ', this.state.messages[messages.length - 1]);\n        });\n\n\n    };\n\n    updateMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('updateMessage, body: ', body);\n        console.log('updateMessage, editorState: ', editorState);\n\n        fetch(`/api/message/${this.state.isEditing.id}/`, {\n            method: \"PATCH\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n            var messages = this.state.messages;\n\n            post.message_text = JSON.stringify(post.message_text);\n\n            messages.push(post);\n\n\n            console.log('body: ', body);\n            console.log('editorState: ', editorState);\n            this.setState({messages: messages, isEditing: false});\n\n            console.log('new state, last message ', this.state.messages[messages.length - 1]);\n        });\n\n\n    };\n\n    deleteMessage = (message) => {\n        console.log('message: ', message);\n        fetch(`/api/message/delete/${message.id}/`, {\n            method: \"DELETE\",\n            },\n        )\n            .then(response => {\n              console.log(response);\n            },\n            )\n            .then((messages) => {\n                let allMessages = this.state.messages;\n                let newMessages = allMessages.filter((currentMessage) => {\n                    return currentMessage.id !== message.id;\n                });\n\n                this.setState({messages: newMessages})\n                }\n            )\n    };\n\n\n    //******* Handlers **********\n\n    handleEdit(message) {\n\n        console.log('handleEdit is firing', message);\n        this.setState({isEditing: message});\n\n    }\n\n\n\n// loads messages from api/message onto screen\n    componentDidMount() {\n        fetch('/api/message/')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                    this.setState({\n                        messages: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const isEditing = this.state.isEditing;\n\n        return (\n            <div className=\"App\">\n                <form action=\"../profile\">\n                 <button className=\"btn-redirect\">\n                    Go Back to Profile\n                </button>\n                </form>\n                <h1>Messenger</h1>\n                <h3>Not sure what to say?</h3>\n                <ul className='convo-topics'>\n                <li className=\"topic\">Tell me about the people that live in your house.</li>\n                <li className=\"topic\">How many students are in your class? In your school?</li>\n                <li className=\"topic\">What sort of elective course are you taking? </li>\n                <li className=\"topic\">What's your favorite home-cooked meal?</li>\n                </ul>\n\n\n                {isEditing ? (\n                    <UpdateMessage updateMessage={this.updateMessage} message={this.state.isEditing}/>\n                ) : (\n                    <div className='is-editing-false'>\n                        <ChatMessages messages={this.state.messages} deleteMessage={this.deleteMessage} handleEdit={this.handleEdit}/>\n                        <ChatInput sendMessage={this.sendMessage}/>\n                    </div>\n                )\n                }\n                {/*<Button onClick={location.href='buddies:profile'}/>*/}\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
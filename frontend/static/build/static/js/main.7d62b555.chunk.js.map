{"version":3,"sources":["component/ChatMessages.js","component/ChatInput.js","container/App.js","serviceWorker.js","index.js"],"names":["ChatMessages","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertMessageFromJSONToText","text","x","stateToHTML","convertFromRaw","JSON","parse","console","log","e","blocks","state","_this2","react_default","a","createElement","className","messages","map","message","key","id","sender","dangerouslySetInnerHTML","__html","Component","ChatInput","onEditorStateChange","editorState","setState","messageText","EditorState","createEmpty","handleSubmit","bind","assertThisInitialized","event","preventDefault","convertToRaw","getCurrentContent","sendMessage","onSubmit","react_draft_wysiwyg","toolbarClassName","wrapperClassName","editorClassName","type","App","body","message_text","fetch","method","stringify","headers","Accept","Content-Type","then","response","json","post","push","length","res","result","error","component_ChatMessages","component_ChatInput","Boolean","window","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d62b555.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../container/App.css';\nimport {stateToHTML} from 'draft-js-export-html';\nimport { convertFromRaw } from 'draft-js';\n\n\nimport moment from 'moment'\n\n\nclass ChatMessages extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // messages:  [\n            //     {messageText: '', sender: '', timeSent: ''},\n            //     ]\n        }\n\n    }\n\n   convertMessageFromJSONToText = (text) => {\n        let x;\n\n        try {\n            x = stateToHTML(convertFromRaw(JSON.parse(text)));\n            console.log('try', x);\n        }catch (e) {\n            x = text.blocks[0].text;\n            console.log('catch', x);\n        }\n\n        console.log('what are we returning', x);\n        return x\n    };\n\n    render() {\n        return (\n            <ul className='message-list'>\n                {this.props.messages.map(message => {\n                    return (\n                        <li key={message.id}>\n                            <div>\n                                {message.sender['first_name']}\n                            </div>\n                                <div\n                                    dangerouslySetInnerHTML={{__html: this.convertMessageFromJSONToText(message['message_text'])}}>\n                                </div>\n                            <div>\n                                {message['time_sent']}\n                            </div>\n\n                            <br/>\n                        </li>\n                    )\n                })\n                }\n            </ul>\n        )\n    }\n}\n\nexport default ChatMessages;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport {Editor} from 'react-draft-wysiwyg'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\n\nclass ChatInput extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            messageText: '',\n            editorState: EditorState.createEmpty()\n        };\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    // handleChange(event){\n    //     this.setState({\n    //         [event.target.name]: event.target.value\n    //     })\n    // }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n        });\n    };\n\n    handleSubmit(event){\n        event.preventDefault();\n        convertToRaw(this.state.editorState.getCurrentContent());\n        console.log('send message', this.state.editorState);\n        this.props.sendMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n\n            // messageText: ''\n        })\n    }\n\n    render() {\n        return(\n         <form\n             className='message-input-form'\n             onSubmit={this.handleSubmit}\n         >\n\n               <Editor\n                editorState={this.state.editorState}\n                toolbarClassName=\"toolbarClassName\"\n                wrapperClassName=\"wrapperClassName\"\n                editorClassName=\"editorClassName\"\n                onEditorStateChange={this.onEditorStateChange}\n            />\n             {/*<textarea*/}\n                 {/*cols={40}*/}\n                 {/*rows={10}*/}\n                 {/*name='messageText'*/}\n                 {/*onChange={this.handleChange}*/}\n                 {/*value={this.state.messageText}*/}\n                 {/*placeholder='Type your message here'*/}\n             {/*/>*/}\n              <button type=\"submit\" className=\"btn btn-primary\">\n                        Send\n                    </button>\n         </form>\n        )\n    }\n}\n\nexport default ChatInput;","import React, { Component } from 'react';\nimport './App.css';\nimport ChatMessages from  '../component/ChatMessages'\nimport ChatInput from  '../component/ChatInput'\nimport { convertFromRaw, convertToRaw } from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport moment from 'moment'\n\n\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            messages: [\n                // {messageText: '', sender: '', timeSent: ''},\n                // {messageText: \"What's up?\", sender: 'Kelsey', timeSent: '12:02pm'},\n                // {messageText: \"Nothing. Just missing you and Hashbrown, wondering what you ladies are up to.\", sender: 'Janeen', timeSent: '12:02pm'},\n                // {messageText: \"Girl, we're just both eating tomatoes, you're not missing much.\", sender: 'Kelsey', timeSent: '12:03pm'}\n                ]\n            // only need message text in state\n        };\n        this.sendMessage = this.sendMessage.bind(this)\n    }\n\n\n\n    sendMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('body: ', body);\n        console.log('editorState: ', editorState);\n\n        fetch('/api/message/', {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n            var messages = this.state.messages;\n\n            post.message_text = JSON.stringify(post.message_text);\n\n            messages.push(post);\n\n            this.setState({messages: messages})\n\n            console.log('this: ', this.state.messages[messages.length-1]);\n        });\n\n\n\n    };\n\n\n// loads messages from api/message onto screen\n    componentDidMount() {\n        fetch('/api/message/')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n            this.setState({\n                messages: result\n            });\n        },\n                (error) =>{\n                    this.setState({\n                        error\n                    });\n                }\n\n            )\n    }\n\n    render() {\n        return (\n          <div className=\"App\">\n              <h1>Let's talk!</h1>\n              {/*<h3>Not sure what to say?</h3>*/}\n              {/*<ul>*/}\n                  {/*<li className=\"topic\">Convo topic #1</li>*/}\n                  {/*<li className=\"topic\">Convo topic #2</li>*/}\n                  {/*<li className=\"topic\">Convo topic #3</li>*/}\n                  {/*<li className=\"topic\">Convo topic #4</li>*/}\n              {/*</ul>*/}\n              <ChatMessages messages={this.state.messages}/>\n              <ChatInput sendMessage={this.sendMessage}/>\n          </div>\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
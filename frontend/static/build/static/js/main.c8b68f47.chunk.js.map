{"version":3,"sources":["component/ChatMessages.js","component/ChatInput.js","component/UpdateMessage.js","container/App.js","serviceWorker.js","index.js"],"names":["ChatMessages","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertMessageFromJSONToText","text","x","console","log","stateToHTML","convertFromRaw","JSON","parse","e","state","_this2","react_default","a","createElement","messages","map","message","dateToFormat","ListGroup_default","className","key","id","Item","sender","dangerouslySetInnerHTML","__html","dist_default","format","window","userId","onClick","handleEdit","deleteMessage","Component","ChatInput","onEditorStateChange","editorState","setState","messageText","EditorState","createEmpty","handleSubmit","bind","assertThisInitialized","event","preventDefault","convertToRaw","getCurrentContent","sendMessage","onSubmit","react_draft_wysiwyg","toolbarClassName","wrapperClassName","editorClassName","type","UpdateMessage","plainText","message_text","blocksFromHTML","convertFromHTML","ContentState","createFromBlockArray","contentBlocks","entityMap","createWithContent","updateMessage","App","body","fetch","method","stringify","headers","Accept","Content-Type","then","response","json","post","push","length","concat","isEditing","toConsumableArray","index","indexOf","newMessages","filter","currentMessage","res","result","error","action","component_UpdateMessage","component_ChatMessages","component_ChatInput","Boolean","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8b68f47.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../container/App.css';\nimport {stateToHTML} from 'draft-js-export-html';\nimport {stateFromHTML} from \"draft-js-import-html\";\nimport {convertFromRaw, convertToRaw, EditorState, ContentState} from 'draft-js';\nimport Listgroup from 'react-bootstrap/ListGroup'\n\n\nimport Moment from 'react-moment';\n\n\nclass ChatMessages extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // userAuthorized: false\n        };\n\n        // const moment = require('moment');\n        //\n        // let now = moment();\n\n\n    }\n\n    // hideIfUnauthorized = (user) =>{\n    //     if (user = self.request.user);\n    //     {userAuthorized: true}\n    // };\n\n\n    convertMessageFromJSONToText = (text) => {\n        console.log('this is my text', text);\n        let x;\n\n        try {\n            // this fires when you add a new message\n            x = stateToHTML(convertFromRaw(JSON.parse(text)));\n            console.log('try', x);\n        } catch (e) {\n            // x = stateToHTML(convertFromRaw(text));\n            // this fires when you pull data from the server\n            // x = stateFromHTML(convertFromRaw(JSON.parse(text)));\n\n            // let test = ContentState.createFromBlockArray(text.blocks)\n            // console.log('testing here', test)\n\n            x = stateToHTML(convertFromRaw(text));\n            // x = text.blocks[0].text;\n            console.log('blocks[0].text', x);\n        }\n\n        console.log('what are we returning', x);\n        return x\n    };\n\n\n    render() {\n\n        return (\n                <div>\n                    {this.props.messages.map(message => {\n                        const dateToFormat = message['time_sent'];\n                        return (\n\n                                <Listgroup className=\"message\" key={message.id}>\n                                    <Listgroup.Item>\n                                        {message.sender['first_name']}\n                                    </Listgroup.Item>\n                                    <Listgroup.Item\n                                        dangerouslySetInnerHTML={{__html: this.convertMessageFromJSONToText(message['message_text'])}}>\n                                    </Listgroup.Item>\n                                    <Listgroup.Item>\n                                        <Moment format=\"MMMM Do YYYY, h:mm a\">\n                                            {dateToFormat}\n                                        </Moment>\n                                    </Listgroup.Item>\n\n                                    {(message.sender.id === window.userId) ? (\n                                        <Listgroup.Item className=\"unauthorized\">\n                                            <p className='edit' onClick={() => this.props.handleEdit(message)}>&#9998;</p>\n                                            <p className='delete' onClick={() => this.props.deleteMessage(message)}>&#x2718;</p>\n                                        </Listgroup.Item>\n                                    ): (\n                                        null\n                                    )}\n                                    <br/>\n                                </Listgroup>\n\n\n                        )\n                    })\n                    }\n                     </div>\n                )\n                }\n                }\n\n                export default ChatMessages;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport {Editor} from 'react-draft-wysiwyg'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\n\nclass ChatInput extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            messageText: '',\n            editorState: EditorState.createEmpty()\n        };\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    // handleChange(event){\n    //     this.setState({\n    //         [event.target.name]: event.target.value\n    //     })\n    // }\n\n    onEditorStateChange = (editorState) => {\n\n        this.setState({\n            editorState,\n        });\n    };\n\n    handleSubmit(event){\n        event.preventDefault();\n        convertToRaw(this.state.editorState.getCurrentContent());\n        console.log('send message', this.state.editorState);\n        this.props.sendMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n\n            // messageText: ''\n        })\n    }\n\n    render() {\n        return(\n         <form\n             className='message-input-form'\n             onSubmit={this.handleSubmit}\n         >\n\n             <div className='editor'>\n               <Editor\n                editorState={this.state.editorState}\n                toolbarClassName=\"toolbarClassName\"\n                wrapperClassName=\"wrapperClassName\"\n                editorClassName=\"editorClassName\"\n                onEditorStateChange={this.onEditorStateChange}\n            />\n            </div>\n              <button type=\"submit\" className=\"btn btn-send\">\n                        Send\n                    </button>\n\n         </form>\n        )\n    }\n}\n\nexport default ChatInput;","import React, {Component} from 'react';\nimport '../container/App.css';\nimport {EditorState, ContentState, convertFromRaw, convertFromHTML} from \"draft-js\";\nimport {Editor} from \"react-draft-wysiwyg\";\nimport {stateToHTML} from \"draft-js-export-html\";\n\nclass UpdateMessage extends Component {\n    constructor(props) {\n        super(props);\n        // let plainText = 'What up dude'\n        // let content = ContentState.createFromText(plainText);\n        this.state = {\n            // messageText: '',\n            editorState: null\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        // this.onChange = this.onChange.bind(this);\n    }\n\n\n    componentDidMount() {\n\n        let plainText;\n\n        try {\n            plainText = stateToHTML(convertFromRaw(JSON.parse(this.props.message.message_text)));\n        } catch (e) {\n            plainText = stateToHTML(convertFromRaw(this.props.message.message_text));\n\n        }\n\n        let blocksFromHTML = convertFromHTML(plainText);\n        let editorState = ContentState.createFromBlockArray(\n            blocksFromHTML.contentBlocks,\n            blocksFromHTML.entityMap\n        );\n\n\n        editorState = EditorState.createWithContent(editorState);\n        this.setState({\n            editorState\n        });\n    }\n\n    onEditorStateChange = (editorState) => {\n        console.log('editorState onEditorStateChange: ', editorState);\n        // console.log(editorState.message.id)\n        this.setState({editorState});\n    };\n\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log('editor state on submit: ', this.state.editorState);\n        // convertToRaw(this.state.editorState.getCurrentContent());\n        // console.log('send message', this.state.editorState);\n        this.props.updateMessage(this.state.editorState);\n        this.setState({\n            editorState: EditorState.createEmpty()\n        })\n    }\n\n    render() {\n        console.log('editor state at top of render: ', this.state.editorState);\n        return (\n            <form\n                className='message-input-form'\n                onSubmit={this.handleSubmit}\n            >\n                <div className=\"editor\">\n                    <Editor\n                        editorState={this.state.editorState}\n                        onEditorStateChange={this.onEditorStateChange}\n                        // onChange={this.onChange}\n                        toolbarClassName=\"toolbarClassName\"\n                        wrapperClassName=\"wrapperClassName\"\n                        editorClassName=\"editorClassName\"\n                    />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-redirect\">\n                    Save\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default UpdateMessage;","import React, {Component} from 'react';\nimport './App.css';\nimport ChatMessages from '../component/ChatMessages'\nimport ChatInput from '../component/ChatInput'\nimport {convertFromRaw, convertToRaw, EditorState} from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport moment from 'moment'\nimport UpdateMessage from \"../component/UpdateMessage\";\nimport Button from 'react-bootstrap/Button'\n// import { library } from '@fortawesome/fontawesome-svg-core'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faIgloo } from '@fortawesome/free-solid-svg-icons'\n//\n// library.add(faIgloo)\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            isEditing: false,\n        };\n\n        this.sendMessage = this.sendMessage.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        // this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    //************ API methods *********\n\n    sendMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('body: ', body);\n        console.log('editorState: ', editorState);\n\n        fetch('/api/message/', {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n            var messages = this.state.messages;\n\n            post.message_text = JSON.stringify(post.message_text);\n\n            messages.push(post);\n\n            this.setState({messages: messages});\n\n            console.log('this: ', this.state.messages[messages.length - 1]);\n        });\n\n\n    };\n\n    updateMessage = (editorState) => {\n        var body = {\n            message_text: convertToRaw(editorState.getCurrentContent())\n        };\n        console.log('updateMessage, body: ', body);\n        console.log('updateMessage, editorState: ', editorState);\n\n        fetch(`/api/message/${this.state.isEditing.id}/`, {\n            method: \"PATCH\",\n            body: JSON.stringify(body),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }).then((response) => {\n            return response.json()\n        }).then((post) => {\n\n            // updated wed afternoon to replace below code\n            var messages = [...this.state.messages];\n            var index = messages.indexOf(this.state.isEditing);\n            messages[index].message_text = JSON.stringify(post.message_text);\n\n\n            // var messages = this.state.messages;\n            // post.message_text = JSON.stringify(post.message_text);\n            //\n            // messages.push(post);\n\n\n            console.log('body: ', body);\n            console.log('editorState: ', editorState);\n            this.setState({messages: messages, isEditing: false});\n\n            console.log('new state, last message ', this.state.messages[messages.length - 1]);\n        });\n\n\n    };\n\n    deleteMessage = (message) => {\n        console.log('message: ', message);\n        fetch(`/api/message/delete/${message.id}/`, {\n                method: \"DELETE\",\n            },\n        )\n            .then(response => {\n                    console.log(response);\n                },\n            )\n            .then((messages) => {\n                    let allMessages = this.state.messages;\n                    let newMessages = allMessages.filter((currentMessage) => {\n                        return currentMessage.id !== message.id;\n                    });\n\n                    this.setState({messages: newMessages})\n                }\n            )\n    };\n\n\n    //******* Handlers **********\n\n    handleEdit(message) {\n\n        console.log('handleEdit is firing', message);\n        this.setState({isEditing: message});\n\n    }\n\n\n// loads messages from api/message onto screen\n    componentDidMount() {\n        fetch('/api/message/')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                    this.setState({\n                        messages: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const isEditing = this.state.isEditing;\n\n        return (\n            <div className=\"App\">\n                <div className=\"app-wrapper\">\n                <form action=\"../profile\">\n                    <button className=\"btn-redirect\">\n                        Go Back to Profile\n                    </button>\n                </form>\n                <h1>Messenger</h1>\n\n                {isEditing ? (\n                    <UpdateMessage updateMessage={this.updateMessage} message={this.state.isEditing}/>\n                ) : (\n                    <div className='is-editing-false'>\n                        <ChatMessages messages={this.state.messages} deleteMessage={this.deleteMessage}\n                                      handleEdit={this.handleEdit}/>\n                        <ChatInput sendMessage={this.sendMessage}/>\n                    </div>\n                )\n                }\n                {/*<Button onClick={location.href='buddies:profile'}/>*/}\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}